name: Libobjc2 CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Automatically run the workflow once a month
  schedule:
    - cron: '0 4 1 * *'
  # Allow running the workflow manually
  workflow_dispatch:

jobs:
  ubuntu:
    strategy:
      matrix:
        # Build each combination of OS and release/debug variants
        os: [ "ubuntu-24.04", "ubuntu-22.04" ]
        build-type: [ Release, Debug ]
        blocks-runtime: [ "EMBEDDED", "swift-6.1.2-RELEASE" ]
        cxxlib: [ "libc++", "libstdc++" ]
        llvm-version: [13, 14, 15, 16, 17, 18]
        # Don't bother testing the LLVM versions that aren't in the default image for the different platforms
        exclude:
          - os: "ubuntu-24.04"
            llvm-version: 15
          - os: "ubuntu-24.04"
            llvm-version: 14
          - os: "ubuntu-24.04"
            llvm-version: 13
          - os: "ubuntu-22.04"
            llvm-version: 16
          - os: "ubuntu-22.04"
            llvm-version: 17
          - os: "ubuntu-22.04"
            llvm-version: 18
      # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.build-type }} LLVM-${{ matrix.llvm-version }} ${{ matrix.cxxlib }} BlocksRuntime-${{ matrix.blocks-runtime }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies 
        run: |
          sudo apt install ninja-build
          if [ "${{ matrix.cxxlib }}" = "libc++" ]; then
            sudo apt remove -y 'libc++*'
            apt search libunwind
            sudo apt install libc++-${{matrix.llvm-version}}-dev libc++abi-${{matrix.llvm-version}}-dev 
            sudo apt install libunwind-${{matrix.llvm-version}}-dev || true
          fi
          if [ "${{ matrix.blocks-runtime }}" != "EMBEDDED" ]; then
            git clone --depth 1 --branch "${{ matrix.blocks-runtime }}" https://github.com/apple/swift-corelibs-libdispatch.git ${{github.workspace}}/swift-corelibs-libdispatch
            cmake -B ${{github.workspace}}/swift-corelibs-libdispatch/build -G Ninja -DINSTALL_PRIVATE_HEADERS=ON -DCMAKE_C_COMPILER=clang-${{matrix.llvm-version}} -DCMAKE_CXX_COMPILER=clang++-${{matrix.llvm-version}} -S ${{github.workspace}}/swift-corelibs-libdispatch
            pushd ${{github.workspace}}/swift-corelibs-libdispatch/build
            ninja
            sudo ninja install
            popd
          fi
      - name: Configure CMake
        run: |
          export LDFLAGS=-L/usr/lib/llvm-${{ matrix.llvm-version }}/lib/
          if [ "${{ matrix.blocks-runtime }}" != "EMBEDDED" ]; then
            export EMBEDDED_BLOCKS_RUNTIME=OFF
          else
            export EMBEDDED_BLOCKS_RUNTIME=ON
          fi
          ls -lahR /usr/lib/llvm-${{ matrix.llvm-version }}/lib/
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -G Ninja -DTESTS=ON -DEMBEDDED_BLOCKS_RUNTIME=$EMBEDDED_BLOCKS_RUNTIME -DCMAKE_C_COMPILER=clang-${{matrix.llvm-version}} -DCMAKE_OBJC_COMPILER=clang-${{matrix.llvm-version}} -DCMAKE_ASM_COMPILER=clang-${{matrix.llvm-version}} -DCMAKE_CXX_COMPILER=clang++-${{matrix.llvm-version}} -DCMAKE_OBJCXX_COMPILER=clang++-${{matrix.llvm-version}} -DCMAKE_CXX_FLAGS="-stdlib=${{matrix.cxxlib}}"
        # Build with a nice ninja status line
      - name: Build
        working-directory: ${{github.workspace}}/build
        run: |
          NINJA_STATUS="%p [%f:%s/%t] %o/s, %es" ninja
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: |
          ctest --output-on-failure -j 4

  qemu-crossbuild:
    strategy:
      matrix:
        build-type: [ Release, Debug ]
        llvm-version: [16, 17, 18]
        arch:
          - name: armhf
            system-processor: arm
            triple: arm-linux-gnueabihf
            rtld: ld-linux-armhf.so.3
            # The C++ exception tests are failing, disable them until they are debugged.
            unsupported: -E CXX
          - name: arm64
            system-processor: aarch64
            triple: aarch64-linux-gnu
            rtld: ld-linux-aarch64.so.1
          - name: riscv64
            system-processor: riscv64
            triple: riscv64-linux-gnu
            rtld: ld-linux-riscv64-lp64d.so.1
          - name: ppc64el
            system-processor: powerpc64le
            triple: powerpc64le-linux-gnu
            rtld: ld64.so.2
        exclude:
          # FIXME(hugo): Hangs while executing tests.
          - llvm-version: 18
            arch:
              name: ppc64el
      # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ubuntu-latest
    name: Cross-build for ${{ matrix.arch.triple }} LLVM-${{ matrix.llvm-version}} ${{ matrix.build-type }}
    steps:
      - uses: actions/checkout@v3
      - name: Install cross-compile toolchain and QEMU
        run: |
          sudo apt update
          sudo apt install libstdc++-9-dev-${{ matrix.arch.name }}-cross qemu-user ninja-build
      - name: Configure CMake
        run: |
          export LDFLAGS="-L/usr/lib/llvm-${{ matrix.llvm-version }}/lib/ -fuse-ld=lld-${{ matrix.llvm-version}} -Wl,--dynamic-linker=/usr/${{ matrix.arch.triple }}/lib/${{ matrix.arch.rtld }},-rpath,/usr/${{ matrix.arch.triple }}/lib"
          cmake -B ${{github.workspace}}/build \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch.system-processor }} \
            -DCMAKE_C_COMPILER=clang-${{ matrix.llvm-version }} \
            -DCMAKE_CXX_COMPILER=clang++-${{ matrix.llvm-version }} \
            -DCMAKE_ASM_COMPILER=clang-${{ matrix.llvm-version }} \
            -DCMAKE_C_COMPILER_TARGET=${{ matrix.arch.triple }} \
            -DCMAKE_CXX_COMPILER_TARGET=${{ matrix.arch.triple }} \
            -DCMAKE_OBJC_COMPILER_TARGET=${{ matrix.arch.triple }} \
            -DCMAKE_OBJCXX_COMPILER_TARGET=${{ matrix.arch.triple }} \
            -DCMAKE_ASM_COMPILER_TARGET=${{ matrix.arch.triple }} \
            -DCMAKE_BUILD_TYPE=${{matrix.build-type}} \
            -DTESTS=ON \
            -G Ninja \
        # Build with a nice ninja status line
      - name: Build
        working-directory: ${{github.workspace}}/build
        run: |
          NINJA_STATUS="%p [%f:%s/%t] %o/s, %es" ninja -v
      - name: Test
        working-directory: ${{github.workspace}}/build
        run: |
          ctest --output-on-failure -j 4 ${{ matrix.arch.unsupported }}

  windows:
    strategy:
      matrix:
        # Build each combination of OS and release/debug variants
        os: [ windows-2025 ]
        build-type: [ Release, Debug ]
        arch: [ x64_x86, x64 ]
        include:
          - arch: x64_x86
            flags: -m32
          - arch: x64
            flags: -m64
          - vspath: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build
      # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.build-type }} ${{ matrix.arch }}
    steps:
    - name: look at VS install
      shell: cmd
      run: |
        dir "${{ matrix.vspath }}"
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install dependencies
      run: |
        choco.exe install ninja
    - name: Configure CMake
      shell: cmd
      run: |
        call "${{ matrix.vspath }}\vcvarsall.bat" ${{ matrix.arch }}
        set CFLAGS=${{ matrix.flags }}
        set CXXFLAGS=${{ matrix.flags }}
        set OBJCFLAGS=${{ matrix.flags }}
        set OBJCXXFLAGS=${{ matrix.flags }}
        set ASMFLAGS=${{ matrix.flags }}
        mkdir build
        cd build
        cmake .. -G Ninja -DTESTS=ON -DCMAKE_C_COMPILER="c:/Program Files/LLVM/bin/clang.exe" -DCMAKE_CXX_COMPILER="c:/Program Files/LLVM/bin/clang.exe" -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
    - name: Build
      shell: cmd
      working-directory: build
      run: |
        call "${{ matrix.vspath }}\vcvarsall.bat" ${{ matrix.arch }}
        ninja
    - name: Test
      shell: cmd
      working-directory: build
      run: |
        ctest -j 4 --output-on-failure -T test

  mingw:
    strategy:
      matrix:
        # Build each combination of OS and release/debug variants
        os: [ windows-2025 ]
        msystem: [ ucrt64, mingw64, clang64 ]
        build-type: [ Release, Debug ]
        strict-apple-compatibility: [ ON, OFF ]
        include:
          - msystem: ucrt64
            package-prefix: ucrt-x86_64
            cmake-flags: LDFLAGS="-fuse-ld=lld -lstdc++ -lgcc_s"
          - msystem: mingw64
            package-prefix: x86_64
            cmake-flags: LDFLAGS="-fuse-ld=lld -lstdc++ -lgcc_s"
          - msystem: clang64
            package-prefix: clang-x86_64
            cmake-flags: LDFLAGS="-lc++"
      # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.msystem }} ${{ matrix.build-type}} (Strict Apple compatibility ${{ matrix.strict-apple-compatibility }})
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v3
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: git mingw-w64-${{ matrix.package-prefix }}-clang mingw-w64-${{ matrix.package-prefix }}-lld mingw-w64-${{ matrix.package-prefix }}-cmake
    - name: Configure CMake
      run: |        
        mkdir build
        cd build
        ${{ matrix.cmake-flags }} cmake .. -DTESTS=ON -DCMAKE_C_COMPILER="clang" -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DSTRICT_APPLE_COMPATIBILITY=${{ matrix.strict-apple-compatibility }}
    - name: Build
      working-directory: build
      run: |
        cmake --build .
    - name: Test
      working-directory: build
      run: |
        ctest -j 4 --output-on-failure -T test ${{ matrix.ctest-flags }}
    - name: Install
      working-directory: build
      run: |
        cmake --install . --prefix=../dist
    - uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.os}}-${{ matrix.msystem }}-${{ matrix.build-type }}-compat-${{ matrix.strict-apple-compatibility }}
        path: dist/

  android:
    strategy:
      matrix:
        # Build each combination of OS and release/debug variants
        os: [ ubuntu-24.04, ubuntu-24.04-arm]
        build-type: [ Release, Debug ]
        # TODO(hugo): Add AArch64 configuration when GitHub AArch64 CI runners are available.
        include:
          - os: ubuntu-24.04
            name: x86_64
            triple: x86_64-linux-android
            emu-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
            api-level: [ 31, 35 ]
          - os: ubuntu-24.04-arm
            name: arm64-v8a
            triple: aarch64-linux-android
            # Before changing the NDK version of this configuration, please
            # check the clang version shipped with the NDK (i.e.
            # $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/lib/clang/VERSION)
            # and modify the NDK patching step below.
            ndk: "28.2.13676358"
            llvm-version: 19
            emu-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
            api-level: [ 35 ]
        # Include the oldest Android version still receiving security update
        # and the latest version. 
        # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: Android ${{ matrix.build-type }} ${{ matrix.name }} API-${{ matrix.api-level }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install patchelf ninja-build -y
    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    - name: Patch Android SDK
      if: ${{ matrix.name }} == arm64-v8a
      run: |
        sudo apt-get install clang-${{matrix.llvm-version}} lld-${{matrix.llvm-version}} adb sdkmanager openjdk-21-jre --no-install-recommends -y
        sudo sdkmanager --install "cmdline-tools;latest"

        CMDLINE_TOOLS=/opt/android-sdk/cmdline-tools/latest/bin
        yes | sudo $CMDLINE_TOOLS/sdkmanager --licenses
        sudo $CMDLINE_TOOLS/sdkmanager --install "ndk;${{ matrix.ndk }}"

        export ANDROID_NDK_HOME=/opt/android-sdk/ndk/${{matrix.ndk}}
        export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64

        # Save for later use
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

        # Create a C++ version of the wrapper
        SCRIPT_DIR=${{github.workspace}}/.github/scripts
        cp $SCRIPT_DIR/aarch64-linux-android35-clang $SCRIPT_DIR/aarch64-linux-android35-clang++

        # Patch the paths in the wrappers
        bin_dir = $TOOLCHAIN/bin
        cc=`which clang-${{matrix.llvm-version}}`
        cxx=`which clang++-${{matrix.llvm-version}}`

        sed -i \
            -e "s|@BIN_DIR@|$bin_dir|g" \
            -e "s|@CC@|$cc|g" \
           "$SCRIPT_DIR/aarch64-linux-android35-clang"
        sed -i \
            -e "s|@BIN_DIR@|$bin_dir|g" \
            -e "s|@CC@|$cxx|g" \
           "$SCRIPT_DIR/aarch64-linux-android35-clang++"

        chmod +x $SCRIPT_DIR/aarch64-linux-android35-clang
        chmod +x $SCRIPT_DIR/aarch64-linux-android35-clang++
    - name: AVD cache
      if: ${{ matrix.name }} != arm64-v8a
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.os }}-${{ matrix.api-level }}-${{matrix.name}}
    - name: Create AVD and Snapshot for Caching
      if: (steps.avd-cache.outputs.cache-hit != 'true') && (${{ matrix.name }} != arm64-v8a)
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: ${{ matrix.name }}
        force-avd-creation: false
        emulator-options: ${{ matrix.emu-options }}
        disable-animations: true
        script: echo "Generated AVD snapshot for caching."
    # We are using the default NDK from the GitHub Actions runner.
    - name: Configure CMake
      run: |
        if [ "${{matrix.name}}" -eq "arm64-v8a" ]; then
          SCRIPT_DIR=${{github.workspace}}/.github/scripts
          export CC="$SCRIPT_DIR/aarch64-linux-android35-clang"
          export CXX="$SCRIPT_DIR/aarch64-linux-android35-clang++"
          export OBJC="$SCRIPT_DIR/aarch64-linux-android35-clang"
          export OBJCXX="$SCRIPT_DIR/aarch64-linux-android35-clang++"
          export AS="$SCRIPT_DIR/aarch64-linux-android35-clang"
          export LD=`which ld.lld-${{matrix.llvm-version}}`
          export AR=`which llvm-ar-${{matrix.llvm-version}}`
          export RANLIB=`which llvm-ranlib-${{matrix.llvm-version}}`
          export STRIP=`which llvm-strip-${{matrix.llvm-version}}`
          export NM=`which llvm-nm-${{matrix.llvm-version}}`
          export OBJDUMP=`which llvm-objdump-${{matrix.llvm-version}}`
        else
          TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          CCPREFIX=$TOOLCHAIN/bin/${{ matrix.triple }}${{ matrix.api-level }}

          export CC="$CCPREFIX-clang"
          export CXX="$CCPREFIX-clang++"
          export OBJC="$CCPREFIX-clang"
          export OBJCXX="$CCPREFIX-clang++"
          export AS="$CCPREFIX-clang"
          export LD="$TOOLCHAIN/bin/ld.lld"
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export STRIP="$TOOLCHAIN/bin/llvm-strip"
          export NM="$TOOLCHAIN/bin/llvm-nm"
          export OBJDUMP="$TOOLCHAIN/bin/llvm-objdump"
        fi
        export LDFLAGS="-fuse-ld=lld"
        export LIBS="-lc++_shared"

        cmake -B ${{github.workspace}}/build \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.name }} \
          -DANDROID_NDK=$ANDROID_NDK_HOME \
          -DANDROID_STL=c++_shared \
          -DCMAKE_FIND_USE_CMAKE_PATH=false \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -DCMAKE_ASM_COMPILER=$AS \
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}} \
          -DTESTS=ON \
          -DANDROID_PLATFORM=android-${{ matrix.api-level }} \
          -G Ninja
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: |
        NINJA_STATUS="%p [%f:%s/%t] %o/s, %es" ninja -v
    - name: Test
      if: ${{ matrix.name }} != arm64-v8a
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: ${{ matrix.name }}
        force-avd-creation: false
        emulator-options: ${{ matrix.emu-options }}
        disable-animations: true
        target: default
        script: |
          ${{github.workspace}}/.github/scripts/android_test_main.sh ${{github.workspace}}/build ${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot ${{ matrix.triple }}


  # Fake check that can be used as a branch-protection rule.
  all-checks:
    needs: [ubuntu, windows, qemu-crossbuild]
    runs-on: ubuntu-latest
    steps:
    - name: Dummy step
      run: true

